// src/utils/downloadHtml.js

// Simple inline markdown -> HTML (bold/italic) + HTML escaping
function mdInline(s = "") {
  return s
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/\*\*(.+?)\*\*/g, "<strong>$1</strong>")
    .replace(/\*(.+?)\*/g, "<em>$1</em>");
}

function sectionToHtml(section) {
  const lines = section.split(/\r?\n/).map(l => l.trim()).filter(Boolean);
  if (!lines.length) return "";

  // First line is usually "Day X: Title"
  const heading = lines[0].replace(/^\*\*?|\*\*?$/g, "");
  const bodyLines = lines.slice(1);

  const chunks = [];
  let list = [];

  const flushList = () => {
    if (!list.length) return;
    chunks.push(`<ul class="list">${list.map(li => `<li>${mdInline(li)}</li>`).join("")}</ul>`);
    list = [];
  };

  for (const raw of bodyLines) {
    // Local Tip callout
    if (/^(\*\s*)?local tip\s*:/i.test(raw)) {
      flushList();
      const tip = raw.replace(/^\*\s*/,'').replace(/^local tip\s*:/i, "").trim();
      chunks.push(`<div class="tip"><strong>Local Tip:</strong> ${mdInline(tip)}</div>`);
      continue;
    }

    // Bullet lines: -, â€¢, or *
    if (/^(-|\u2022|\*)\s+/.test(raw)) {
      list.push(raw.replace(/^(-|\u2022|\*)\s+/, ""));
    } else {
      flushList();
      chunks.push(`<p>${mdInline(raw)}</p>`);
    }
  }
  flushList();

  return `<section class="day">
    <h2>${mdInline(heading)}</h2>
    ${chunks.join("\n")}
  </section>`;
}

export function itineraryTextToHtml(itineraryText = "", title = "SmartTrip Itinerary") {
  const parts = itineraryText
    .split(/\n(?=Day\s+\d+\s*:)/g)
    .map(s => s.trim())
    .filter(Boolean);

  const body = parts.length
    ? parts.map(sectionToHtml).join("\n")
    : `<p>${mdInline(itineraryText).replace(/\n/g, "<br/>")}</p>`;

  // Use String.raw to avoid accidental escaping problems
  const html = String.raw`<!doctype html>
<html>
<head>
  <meta charset="utf-8"/>
  <title>${mdInline(title)}</title>
  <style>
    :root{
      --text:#111827;
      --muted:#6b7280;
      --primary:#0284c7;
      --border:#e5e7eb;
      --bg:#ffffff;
      --tip:#f0f9ff;
      --tip-border:#bae6fd;
    }
    @page { size: A4; margin: 18mm; }
    @media print {
      .no-print{display:none!important;}
      .day{break-inside:avoid-page; page-break-inside:avoid; margin-bottom:12mm;}
      .day + .day{page-break-before:auto;}
    }
    *{box-sizing:border-box}
    body{margin:0; background:var(--bg); color:var(--text);
         font:14px/1.6 ui-sans-serif, system-ui, -apple-system, "Segoe UI", Roboto, Arial;}
    .wrap{max-width:860px; margin:28px auto; background:#fff; border:1px solid var(--border);
          border-radius:14px; padding:28px 32px;}
    h1{margin:0 0 4px; font-size:28px; color:var(--primary);}
    .meta{color:var(--muted); margin-bottom:16px}
    h2{font-size:18px; margin:18px 0 8px;}
    p{margin:0 0 10px}
    .list{margin:0 0 12px 1.1em}
    .list li{margin:4px 0}
    .divider{height:1px; background:var(--border); margin:12px 0 16px}
    .tip{background:var(--tip); border:1px solid var(--tip-border); padding:10px 12px;
         border-radius:8px; margin:8px 0 12px}
    .footer{color:var(--muted); font-size:12px; margin-top:16px}
  </style>
</head>
<body>
  <div class="wrap">
    <h1>${mdInline(title)}</h1>
    <div class="meta">Generated by SmartTrip</div>
    <div class="divider"></div>
    ${body}
    <div class="footer">Open in a browser to print to PDF, or open in Word and Save as PDF/DOCX.</div>
  </div>
</body>
</html>`;

  return html;
}

export function downloadHtml(filename, htmlString) {
  const blob = new Blob([htmlString], { type: "text/html;charset=utf-8" });
  const url = URL.createObjectURL(blob);
  const a = document.createElement("a");
  a.href = url;
  a.download = filename.endsWith(".html") ? filename : `${filename}.html`;
  document.body.appendChild(a);
  a.click();
  a.remove();
  URL.revokeObjectURL(url);
}
